자료구조와 알고리즘
이진 탐색과 순차탐색
- 순차탐색
 순차 탐색(Sequential Search)이란 앞에서부터 데이터 하나씩 순차적으로 탐색하는 것이다. 데이터의 정렬 여부와 관계없이 가장 앞에 있는 데이터부터 확인하는 방식으로 O(N)만큼의 시간 복잡도를 갖게 된다.

 

finding_target = 14
finding_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]


def is_existing_target_number_sequential(target, array):
    find_count = 0 # 탐색 횟수
    for number in array:
        find_count += 1 # 총 14번의 탐색.
        if target == number:
            print(find_count)
            return True

    return False


result = is_existing_target_number_sequential(finding_target, finding_numbers)
print(result)  # True
 

- 이진탐색
 이진 탐색(Binary  Search)은 쉽게 업다운게임으로 생각하면 된다. 배열의 중간 값을 가져와 검색 값과 비교하고 값을 찾으면 값을 리턴, 값을 찾지 못하면 검색범위를 줄여 다시 재탐색하는 방식이다. 이진탐색은 일정한 규칙으로 정렬되어 있을 때만 가능하고 무작위 정렬이 되어 있을 경우 탐색이 불가능하거나 오름차순으로 배열을 정렬해주는 .sort() 를 이용해 탐색한다. O(logN)만큼의 시간 복잡도를 갖고 있다. 

 

finding_target = 14
finding_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
# 1단계 (1 + 16) // 2 = 8 >> up
# 2단계 (9 + 16) // 2 = 12 >> up
# 3단계 (13 + 16) // 2 = 14 >> True

def is_existing_target_number_binary(target, array):
    current_min = 0 # 최솟값 인덱스 값
    current_max = len(array) - 1 # array의 맨뒤에 인덱스 값
    current_guess = (current_min + current_max) // 2
    find_count = 0 # 탐색 횟수

    while current_min <= current_max:
        find_count += 1
        if array[current_guess] == target:
            print(find_count)
            return True
        elif array[current_guess] < target:
            current_min = current_guess + 1
        else:
            current_max = current_guess - 1
        current_guess = (current_max + current_min) // 2
    return False


result = is_existing_target_number_binary(finding_target, finding_numbers)
print(result)
 

 

재귀 함수
- 재귀
 재귀란 어떠한 것을 정의할 떄 자기 자신을 참조하는 것이다. 재귀 함수(Recursive Function)는 자기 자신을 계속 호출하는 함수로 재귀 함수를 이용해 간결하고 효율성이 있는 코드를 작성할 수 있다. 함수를 호출할 때는 무한루프에 빠지지 않게 하기 위해 언제 끝나는지 꼭 명시해줘야 한다.

 

def count_down(number): # 함수 count_down은 number라는 인자를 받는다.
    if number < 0:
        return
    print(number)          # number를 출력하고
    count_down(number - 1) # count_down 함수를 number - 1 인자를 주고 다시 호출한다!


count_down(60)
 

- 팩토리얼
 팩토리얼(Factorial)이란 1부터 양의 정수 n까지 모두 곱한 것으로, 주로 재귀 함수와 관련되어 문제로 나온다.

 

3! = 3*2*1

4! = 4*3*2*1 = 4*3!

 

Factorial(n) = n * Factorial(n - 1)

Factorial(n - 1) = (n - 1) * Factorial(n - 2)

....

Factorial(1) = 1

 

#Factorial(N) = N * Factorial(N - 1)
#...
#Factorial(1) = 1

def factorial(n):
    if n == 1:
        return 1

    return n * factorial(n - 1) # 5 * fatorial(4) ....


print(factorial(5))
 

 

- 회문검사
 회문(Palindrom)은 똑바로 읽으나 거꾸로 읽으나 똑같은 단어나 문장을 의미한다. 

 

토마토

오디오

아시아

일요일 ...

 

is_palindrome("역삼역")   # True
is_palindrome("potato") # False
is_palindrome("abcba")  # True
 

input = "아일요일아"


def is_palindrome(string):
    if len(string) <= 1:
        return True

    if string[0] != string[-1]:
        return False

    return is_palindrome(string[1:-1])


print(is_palindrome(input))
 

 

 

 

오늘 중 제일 머리에 넣고 싶은 것
 

 

Git과 Github
Git
 Git은 버전관리를 위한 도구로 Git을 사용하면 버전의 히스토리도 확인 가능하다. 파일을 여러개 만들 필요 없이 Git을 이용해 기능의 완성 때 마다 작업내역을 저장하여 에러를 찾는 데에 용이하고, 협업해서 하나의 프로젝트를 만드는데 유용하다. 프로젝트를 나누어서 작업하고 합치는 것에 Git이 편리함을 가져다 준다. 이 떄는 누가 언제 어떤 부분을 수정했는지 파악하기 쉽다.

 

Github
 구글드라이브와 같이 원격으로 올릴 수 있는 클라우드로, 프로젝트들을 올릴 수 있고 커뮤니티 기능도 제공된다. url 주소만 있다면 다른 사람의 프로젝트를 구경할 수 있고 관심있는 기술들을 참고할 수 있다.

 

Sourcetree
 Git을 쉽게 사용할 수 있는 도구이다.

 

 

- Git 초기화(initialize)
 내 컴퓨터 폴더 안에 있는 기존 프로젝트에 Git프로젝트로 속성을 추가하는 것이다. 다시 말해 프로젝트를 Git 이 관리하게 만드는 것이다.

- 커밋(Commit)
 커밋이란 현재 프로젝트의 상태를 저장하는 것으로 깃은 커밋을 통해 프로젝트의 상태를 저장하고 조회한다. 커밋 시에는 누가, 언제 커밋을 했는지의 정보가 나타나고 수정된 파일과 함께 수정된 내용을 알아볼 수 있게 메세지에 기재하는 것이 좋다. 이것은 협업할 때 매우 중요한 요소이다. 커밋은 히스토리에 남겨져서 커밋한 버젼에 대한 정보들을 확인할 수 있다.
 
- 애드 혹은 스테이징(add or staging)
 커밋에 반영할 파일을 스테이지에 올리는 것을 의미하며, add 나 staging이라고도 한다. 내 컴퓨터에서 내용을 변경한 파일들 중 일부만 스테이징해서 커밋할 수 있다. 부분적인 수정의 경우 관련된 파일만 선택해 커밋하는 것이 좋고 작업 내역을 나타내는 메세지를 잊지 않는다.

 

 

원격 repo에 대해
- Git으로 관리되는 프로젝트를 Git에서는 리포지토리(repository)라고 하고 짧게 repo라고 많이 부른다. 내 컴퓨터에 저장되어 있는 리포지토리를 로컬 repo(local repository), Github를 비롯한 어떤 클라우드 서비스를 갖고 있는 곳에서 접속할 수 있는 공간에 저장되어있는 리포지토리를 원격 repo(remote repository)라고 한다.

 

- 로컬 repo와 원격 repo는 서로 연결이 가능하다. 이 둘을 연결하는 것을 Tracking(추적)이라고 한다. 하나의 원격 repo와 여러 개의 로컬 repo는 연결이 가능해서 하나의 프로젝트에 여러 명의 협업이 용이하다.

 

- 로컬 repo에서 원격 repo로 밀어넣는 것을 push, 원격 repo에서 로컬 repo로 당겨오는 것을 pull이라고 한다. 각각 새로운 커밋을 push는 원격 repo에, pull은 로컬 repo에 반영한다. 원격 repo에 있는 것을 그대로 내 컴퓨터에 다운로드, 복제해오는 것을 clone이라 한다.

 

* 프로젝트 시에는 pull - commit - push 순으로 이용하는 것이 좋다. 문제발생의 원인을 쉽게 찾을 수 있기 때문.

 

 


 
 

오늘의 벽은?
- Git과 Github 어렵지 않네..? 오늘의 벽이라기보다는 그 동안 쌓여있던 벽이었다. git을 사용할 줄 몰라서 유튜브보면서 대충 따라해본다는게 에디터에 파일제목들이 빨간색으로 보이게 만들었고 되돌리는 방법을 모른채 지내왔다. 그런데 오늘 공부를 해보니까 그런 폴더들은 '.git'이라는 숨겨진 폴더가 commit 할거냐는 창을 계속 뜨게 만들고 빨간색의 파일 제목을 만들어 냈다는 것을 알게 되었다. 그리고 나서 나는 과감하게 커밋안할 폴더에 .git을 지워버렸다. 별것도 아니고 엄청 작은 사소한 것인데 속이 후련했다. 비록 아직 소스트리를 이용해서 배운 것이지만, 오늘 배운 git에 대한 내용은 매우 유익했던 것 같다.

 

 
 
하루의 마무리
- 역시 월요일이 제일 피곤하다. 일찍 일어나려고 7시 30분 알람을 맞춰놨는데 못들었고, 8시 30분 알람도 못들었다. 그런데 8시 55분에 눈이 떠졌다. 그대로 쭉 잤으면 .. 천만다행이다.. 잠이 최고의 보약이라는데 보약을 못먹고 있다. 내가 잠을 잘 자는 패턴은 술을 많이 마시는 것인데, 숙취도 심한 편이다 보니 다음날 아무것도 못한다. 술을 마셔볼까 생각해봤는데 그건 또 아닌 것 같고..

-  

 

 

 

 